{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-design-patterns-index-mdx-03a968a4876722989ebe.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./content/posts/design-patterns/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    h3: \"h3\",\n    code: \"code\",\n    ul: \"ul\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Design patterns are typically split into three categories, and this is called Gamma Categorization. The three categories are:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Creational Patterns\"), \" - deal with the creation (construction) of objects. Explicit (constructor) vs. implicit (DI, reflection, etc.). Wholesale (single statement) vs. piecewise (step-by-step).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Structural Patterns\"), \" - concerned with the structure (e.g., class members). Many patterns are wrappers that mimic the underlying class' interface. They strees the importance of good API design.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Behavioural Patterns\"), \" - they are all different; they do not have a lot in common. They are concerned with algorithms and the assignment of responsibilities between objects. They help objects communicate with each other.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Single Responsibility Principle / Separation of Concern\"), \"\\n\", React.createElement(_components.p, null, \"If we have a class, the class should have its primary responsibility (whatever it is meant to be doing) and it should not take on other responsibilities. Do not overload objects with too many responsibilities. Antipattern: God object - putting everything into a kitchen sink-like single class. This principle prevents us from creating such God objects. It enforces the idea that a class should have a single reason to change and that change should be somehow related to its primary responsibility. Separation of concerns means different classes handling different, independent tasks / problems.\"), \"\\n\", React.createElement(_components.h3, null, \"Open/Closed Principle\"), \"\\n\", React.createElement(_components.p, null, \"Open for extension, closed for modification. We should be able to extend a class's behavior and add new features without modifying it. We should strive to write code that doesn't have to be modified every time the requirements change. This principle is achieved by using interfaces and abstract classes. We can extend the behavior of a class by writing a new class that implements the same interface or extends the same abstract class.\"), \"\\n\", React.createElement(_components.p, null, \"Breaking this principle causes state space explosion. Example: if we have a class that has a lot of if/else statements, we have to test all of the possible combinations of the if/else statements. We can avoid this by using polymorphism and inheritance.\"), \"\\n\", React.createElement(_components.h3, null, \"Liskov Substitution Principle\"), \"\\n\", React.createElement(_components.p, null, \"Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program. If we have a class A and a class B that extends A, we should be able to replace A with B without breaking the program. If we have an interface that has some sort of a base class, we should be able to add a derived class without breaking the program.\"), \"\\n\", React.createElement(_components.p, null, \"This principle is closely related to the Open/Closed Principle. If we have a class A and a class B that extends A, we should be able to extend the behavior of A by writing a new class C that extends B. We should be able to do this without modifying the code of A or B.\"), \"\\n\", React.createElement(_components.h3, null, \"Interface Segregation Principle\"), \"\\n\", React.createElement(_components.p, null, \"Clients should not be forced to depend on methods that they do not use. If we have an interface that has a lot of methods, we should split it into smaller interfaces. This principle is closely related to the Single Responsibility Principle. If we have a class that implements an interface, we should not force the class to implement methods that it does not need.\"), \"\\n\", React.createElement(_components.h3, null, \"Dependency Inversion Principle\"), \"\\n\", React.createElement(_components.p, null, \"High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions. If we have a class that depends on another class, we should not depend on the concrete implementation of that class. We should depend on an abstraction of that class. This principle is achieved by using interfaces and abstract classes.\"), \"\\n\", React.createElement(_components.h3, null, \"Builder Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Having objects created with 10 or more initializer arguments is not productive. Instead, opt for piecewise construction. Builder provides an API for constructing an object step-by-step. It allows you to produce different types and representations of an object using the same construction code. When piecewise object construction is complicated, provide an API for doing it succinctly.\"), \"\\n\", React.createElement(_components.p, null, \"A builder is a separate component for building an object. It can either give builder an initializer or return it via static function. To make builder fluent, return self. Different facets of an object can be built with different builders working in tandem via a base class.\"), \"\\n\", React.createElement(_components.h3, null, \"Factory Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes object creation logic becomes too convoluted. Initializers are not always descriptive, and they cannot be overloaded with same set of arguments with different names. Wholesale object creation (non-piecewise, unlike Builder) can be outsourced to a separate method (Factory Method) or something that may exist in a separate class (Factory). It is possible to create hierarchy of factories with Abstract Factory.\"), \"\\n\", React.createElement(_components.p, null, \"A factory is a component responsible solely for the wholesale (not piecewise) creation of objects. It is essentially the implementation of idea of single responsibility principle or separation of concerns. In most cases a factory is just a separate class which is full of factory methods, not necessarily static ones that allow us to create objects. It can be external or reside inside the object as an inner class. Hierarchies of factories can be used to create related objects.\"), \"\\n\", React.createElement(_components.h3, null, \"Abstract Factory Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Abstract Factory offers the interface for creating a family of related objects, without explicitly specifying their classes. It is a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes. If we have a hierarchy of types, then we can have a corresponding hierarchy of factories which creates those types.\"), \"\\n\", React.createElement(_components.h3, null, \"Prototype Pattern\"), \"\\n\", React.createElement(_components.p, null, \"An existing (partially or fully constructed) design is a Prototype. We make a copy (clone / deep copy) the prototype and customize it. We make the cloning convenient (e.g., via a Factory). So, a Prototype is a partially or fully initialized object that you copy (clone) and make use of.\"), \"\\n\", React.createElement(_components.p, null, \"To implement a prototype, partially construct an object and store it somewhere. Deep copy the prototype and customize the result. A factory provides a convenient API for using prototypes.\"), \"\\n\", React.createElement(_components.h3, null, \"Singleton Pattern\"), \"\\n\", React.createElement(_components.p, null, \"For some components it only makes sense to have one in the system (e.g., database repository, object factory). Example, the constructor call is expensive, which should be done only once, and everyone should be provided with the same instance. We would want to prevent anyone creating additional copies. Need to take care of lazy instantiation and thread safety. All of this can be achieved by making the constructor private and creating a static creation method.\"), \"\\n\", React.createElement(_components.p, null, \"Singleton is a component which is instantiated only once. It is achieved by making the constructor private. It is not a good idea to use singletons because they are essentially global variables. They are not testable and they make code tightly coupled. They are essentially a fancy way of creating global variables. Different realizations of Singleton: custom allocator, decorator, metaclass, monostate, etc.\"), \"\\n\", React.createElement(_components.p, null, \"Monostate is a variation of the singleton where we put all the state of an object into a static variable, but at the same time we allow people to create new objects, thereby making new instances which all access the same state.\"), \"\\n\", React.createElement(_components.h3, null, \"Adapter Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Adapter allows us to use an existing interface to be used from another interface. It often involves a wrapper with a conversion of interface. It is a construct which adapts an existing interface X to conform to the required interface Y. Implementing an Adapter is easy: determine the API you have and the API you need. Create a component which aggregates (has a reference to, ...) the adaptee. Intermediate representations can pile up: use caching and other optimizations.\"), \"\\n\", React.createElement(_components.h3, null, \"Bridge Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Bridge prevents a 'Cartesian product' complexity explosion. Example: base class ThreadScheduler, derived classes: LinuxThreadScheduler, WindowsThreadScheduler, MacThreadScheduler, etc. We can have a base class ThreadScheduler and a base class ThreadSchedulerImpl. ThreadSchedulerImpl can have derived classes: LinuxThreadSchedulerImpl, WindowsThreadSchedulerImpl, MacThreadSchedulerImpl, etc. ThreadScheduler can have a reference to ThreadSchedulerImpl. This way we can avoid the 'Cartesian product' complexity explosion.\"), \"\\n\", React.createElement(_components.p, null, \"Bridge is a mechanism that decouples an interface (hierarchy) from an implementation (hierarchy). It is useful when we have an interface and a different implementation. We can have a base class and a derived class. The base class can have a reference to the derived class. The idea of the bridge is to decouple abstraction from implementation. Both can exist as hierarchies, and there is a bridge between them which is a stronger form of encapsulation.\"), \"\\n\", React.createElement(_components.h3, null, \"Composite Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The goal of the composite design pattern is to tread individual components and groups of objects in a uniform fashion, so to provide an identical interface over both aggregates of components as well as individual components. Objects use other objects' fields/properties/members through inheritance and composition. Some composed and singular objects need similar/ identical behaviors. Composition lets us make compound objects. Composite design pattern is used to treat both single (scalar) and composite objects uniformly. It is a mechanism for treating individual (scalar) objects and compositions of objects in a uniform manner. Python supports iteration with \", React.createElement(_components.code, null, \"__iter__\"), \" and the \", React.createElement(_components.code, null, \"Iterable\"), \" ABC. A single object can make itself iterable by yielding \", React.createElement(_components.code, null, \"self\"), \" from \", React.createElement(_components.code, null, \"__iter__\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Decorator Pattern\"), \"\\n\", React.createElement(_components.p, null, \"It exists so that we can add additional behaviors to particular classes without either modifying the classes themselves or indeed inheriting from them. Sometimes we want to augment an object with additional functionality but we don't want to rewrite / alter existing code. We want to keep new functionality separate (SRP). Need to be able to interact with existing structures. Two options: inherit from required object (if possible), or build a decorator which simply references the decorated objects. Decorator facilitates the addition of behaviors to individual objects without inheriting from them.\"), \"\\n\", React.createElement(_components.p, null, \"Decorators in Python are very useful for performing something around a function. A decorator keeps the reference to the decorated object(s). It adds utility attributes and methods to augment the object's features, and it may or may not forward calls to the underlying object. Proxying of underlying calls can be done dynamically.\"), \"\\n\", React.createElement(_components.h3, null, \"Facade Pattern\"), \"\\n\", React.createElement(_components.p, null, \"It is the idea of exposing several components through a single easy to use interface. It provides a simple, easy to understand/user interface over a large and sophisticated body of code. It is usualy built to provide a simplified API over a set of classes. We also may wish to optionally expose the internals through the facade. It may allow users to 'escalate' to use more complex APIs if they need to. It is a higher-level (but simpler) interface that makes a subsystem easier to use.\"), \"\\n\", React.createElement(_components.h3, null, \"Flyweight Pattern\"), \"\\n\", React.createElement(_components.p, null, \"It is a space optimization technique that lets us use less memory by storing externally the data associated with similar objects. We can specify an index or a reference into the external data store while storing this common data externally. We can also define the idea of 'ranges' on homogeneous collections and store data related to those ranges.\"), \"\\n\", React.createElement(_components.h3, null, \"Proxy Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Same interface, but entirely different behaviour - this is an example of communication proxy. Other proxy typews: logging, virtual, guarding, etc. Proxy is a class that functions as an interface to a particular resource. That resource may be remote, expensive to construct, or may require logging or some other added functionality. A proxy has the same interface as the underlying object. To create a proxy, simply replicate the existing interface of an object and add relevant functionality to the redefined member functions.\"), \"\\n\", React.createElement(_components.p, null, \"Protection proxy is a proxy class that controls access to a particular resource. Virtual proxy is a proxy that appears to be the underlying fully initialized object, but it is not. Actually, it is masquerading the underlying functionality and maybe it doesn't have the underlying functionality yet. Proxy provides an identical interface, while decorator provides an enhanced interface. Decorator typically aggregates (or has reference to) what it is decorating, proxy doesn't have to. Proxy might not even be working with a materialized object.\"), \"\\n\", React.createElement(_components.h3, null, \"Chain of Responsibility Pattern\"), \"\\n\", React.createElement(_components.p, null, \"A chain of components who all get a chance to process a command or a query, optionally having default processing implementation and an ability to terminate the processing chain. It can be implemented as a chain of references or a centralized construct. We enlist objects in the chain, possibly controlling their order and also handle object removal from chain.\"), \"\\n\", React.createElement(_components.p, null, \"Command Query Separation (CQS) is a principle which states that whenever we operate on objects, we separate all of the invocations into two different concepts which are called query and command. Command is something that you send when you're asking for an action or a change. Query is something that you send when you're asking for information. CQS is having separate means of sending commands and queries to an object (example: direct field access of a particular class).\"), \"\\n\", React.createElement(_components.h3, null, \"Command Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Ordinary statements are perishable, as we cannot undo member assignment and we cannot directly serialize a sequence of actions (calls). We want an object that represents an operation to perform a particular action. There are lots of uses for this: GUI commands, multi-level undo / redo, macro recording and more. Command is an object which represents an instruction to perform a particular action. It contains all the information necessary for the action to be taken.\"), \"\\n\", React.createElement(_components.p, null, \"We encapsulate all details of an operation in a separate object and define instruction for applying the command (either in the command itself or elsewhere). We can optionally define instructions for undoing the command. We can also create composite commands (a.k.a. macros).\"), \"\\n\", React.createElement(_components.h3, null, \"Interpreter Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Textual input needs to be processed (example: turned into OOP structures). Turning strings into OOP based structures is a complicated process. Interpreter is a component that processes structured text data. It does so by turning it into separate lexical tokens (lexing) and then interpreting sequences of said tokens (parsing). It is used in compilers, interpreters and static analysis tools.\"), \"\\n\", React.createElement(_components.p, null, \"Lexing process basically has to split up an expression of some kind into a set of tokens. Barring simple cases, an interpreter acts in two stages. Lexing turns text into a set of tokens, example: \", React.createElement(_components.code, null, \"3*(4+5) -> Lit[3] Star Lparen Lit[4] Plus Lit[5] Rparen\"), \". Parsing takes a stream of tokens and turns it into a meaningful program structure (AST). Example: \", React.createElement(_components.code, null, \"Lit[3] Star Lparen Lit[4] Plus Lit[5] Rparen -> MultExpr(Lit[3], AddExpr(Lit[4], Lit[5]))\"), \". Parsed data can then be traversed.\"), \"\\n\", React.createElement(_components.h3, null, \"Iterator Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Iteration (traversal) is a core functionality of various data structures. An iterator is a class that facilitates the traversal. It keeps a reference to the current element and has a method to advance to the next element. It is an object that facilitates the traversal of a data structure. The iterator protocol requires \", React.createElement(_components.code, null, \"__iter__()\"), \" method to expose the iterator, which uses \", React.createElement(_components.code, null, \"__next__()\"), \" to return each of the iterated elements or raise \", React.createElement(_components.code, null, \"StopIteration\"), \" when there are no more elements. Python supports iteration with \", React.createElement(_components.code, null, \"__iter__\"), \" and the \", React.createElement(_components.code, null, \"Iterable\"), \" ABC. A single object can make itself iterable by yielding \", React.createElement(_components.code, null, \"self\"), \" from \", React.createElement(_components.code, null, \"__iter__\"), \". Stateful iterators cannot be recursive. \", React.createElement(_components.code, null, \"yield\"), \" allows for much more succinct iteration.\"), \"\\n\", React.createElement(_components.h3, null, \"Mediator Pattern\"), \"\\n\", React.createElement(_components.p, null, \"It facilitates communication between different components. Components may go in and out of a system at any time, and it makes no sense for them to have direct references to one another. The solution is to have them all refer to some central component that facilitates communication. Mediator is a component that facilitates communication between other components without them necessarily being aware of each other or having direct (reference) access to each other. It is also known as the controller pattern.\"), \"\\n\", React.createElement(_components.p, null, \"Create the mediator and have each object in the system refer to it (example: in a property). Mediator engages in bidirectional communication with its connected components. Mediator has functions the components can call. Components have functions the mediator can call. Event processing (e.g., Rx) libraries make communication easier to implement.\"), \"\\n\", React.createElement(_components.h3, null, \"Memento Pattern\"), \"\\n\", React.createElement(_components.p, null, \"An object or system goes through several changes. There are different ways of navigating those changes. One way is to record every change (Command) and teach a command to \\\"undo\\\" itself. Another is to simply save snapshots of the system and restore to those snapshots later (Memento). Memento is a token / handle representing the system state. It lets us roll back to the state when the token was generated. May or may not directly expose state information.\"), \"\\n\", React.createElement(_components.p, null, \"Mementos are used to roll back states arbitrarily. A memento is simply a token / handle class with (typically) no functions of its own. A memento is not required to expose directly the state(s) to which it reverts the system. It can be used to implement undo / redo.\"), \"\\n\", React.createElement(_components.h3, null, \"Observer Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes in our system we need to be informed when certain things happen (example: object's property changes, or an object does something, or some external event occurs). We want to listen to events and be notified when they occur, and these notifications should include useful data. We also want to unsubscribe from events if we are no longer interested. An observer is an object that wishes to be informed about events happening in the system. The entity generating the events is an observable.\"), \"\\n\", React.createElement(_components.p, null, \"Observer is an intrusive approach: an observable must provide an event to subscribe to. Subscription and unsubscription can be handled with addition / removal of items in a list. Property notifications are easy; dependent property notifications are tricky.\"), \"\\n\", React.createElement(_components.h3, null, \"State Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Changes in state can be explicit or in response to an event (observer pattern). This is a pattern in which the object's behavior is determined by its state. An object transitions from one state to another (something needs to trigger a transition). A formalized construct which manages state and transitions is called a state machine.\"), \"\\n\", React.createElement(_components.p, null, \"Given sufficient complexity, it pays to formally define possible states and events/triggers. Can define: state entry/exit behaviors, action when a particular event causes a transition, guard conditions enabling/disabling a transition and default action when no transitions are found for an event.\"), \"\\n\", React.createElement(_components.h3, null, \"Strategy Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Many algorithms can be decomposed into higher and lower level parts. Making tea can be decomposed into: the process of making a hot beverage (boil water, pour into cup); and making a specific drink (tea, coffee). The high-level algorithm can then be reused for making coffee or other drinks, supported by beverage-specific strategies. This pattern enables the exact behaviour of a system to be selected at run-time.\"), \"\\n\", React.createElement(_components.p, null, \"We define an algorithm at a high level. We define the interface we expect each strategy to follow. We provide for dynamic composition of strategies in the resulting object.\"), \"\\n\", React.createElement(_components.h3, null, \"Template Method Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Algorithms can be decomposed into common parts + specifics. Strategy pattern does this through composition: high-level algorithm expects strategies to conform to an interface, and concrete implementations implement the interface. Template Method does the same thing through inheritance: overall algorithm is defined in base class which makes use of abstract members. Inheritors overrride the abstract members. Template method is invoked to get work done.\"), \"\\n\", React.createElement(_components.p, null, \"Template Method allows us to define the \\\"skeleton\\\" of the algorithm, with concrete implementations defined in subclasses. We define an algorithm at a high level in parent class and we define constituent parts as abstract methods / properties. We can then inherit the algorithm class, providing necessary overrides.\"), \"\\n\", React.createElement(_components.h3, null, \"Visitor Pattern\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes we need to define a new operation on an entire class hierarchy, but we do not want to keep modifying every class in the hierarchy. We need access to the non-common aspects of classes in the hierarchy. So we can create an external component to handle rendering, but we want to avoid explicit type checks.\"), \"\\n\", React.createElement(_components.p, null, \"Visitor is a component that knows how to traverse a data structure composed of (possibly related) types. OOP double-dispatch approach is not necessary in Python. We can make a visitor, decorating each \", React.createElement(_components.strong, null, \"overload\"), \" with \", React.createElement(_components.code, null, \"@visitor\"), \", and call \", React.createElement(_components.code, null, \"visit()\"), \" and the entire structure gets traversed.\"), \"\\n\", React.createElement(_components.h2, null, \"Credits & Attributions:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://springframework.guru/gang-of-four-design-patterns/\"\n  }, \"Gang of Four Design Patterns\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/kamranahmedse/design-patterns-for-humans/\"\n  }, \"Design Patterns for Humans\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.udemy.com/course/design-patterns-python/\"\n  }, \"Design Patterns in Python - Udemy Course\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/ruminations/ruminations/content/posts/design-patterns/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","_createMdxContent","_components","Object","assign","h2","p","ol","li","strong","h3","code","ul","_provideComponents","components","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}